DROP PACKAGE BODY VNP_COMMON.ELC_SUBS_OFFER_SYNC;

CREATE OR REPLACE PACKAGE BODY VNP_COMMON.ELC_SUBS_OFFER_SYNC AS

  PROCEDURE ADD_NEW_SUB(inSUB_NO IN VARCHAR2,inOFFER_ID IN VARCHAR2,inRATING_TYPE IN INTEGER,inACTIVE_DATE IN DATE,inIN_ACTIVE_DATE IN DATE,inMODIFIED IN DATE,inEFFECTIVE_DATE IN DATE,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2)

  AS
    v_check_exist INTEGER;
    v_data_part NUMBER;
    v_offer_duration NUMBER;
    v_offer_unit VARCHAR2(10);
    v_end_date_offer DATE;
    CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO);-- and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET
 
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.ADD_NEW_SUB
      v_SUB_ID:=0;
      v_offer_duration:=0;
      v_offer_unit:='UNKNOWN';
      
      --DBMS_OUTPUT.PUT_LINE('Set value OFFER_IN_ACTIVE_DATE');
      BEGIN
      SELECT AUTO_EXPIRATION_DURATION,AUTO_EXPIRATION_UNIT INTO v_offer_duration,v_offer_unit  FROM PRODUCT_OFFER WHERE OFFER_ID=inOFFER_ID; 
      EXCEPTION WHEN OTHERS THEN
        --DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');
        NULL;
      END;
      
      v_end_date_offer:=ADD_TIMES(inACTIVE_DATE,v_offer_duration,v_offer_unit);
      
      
      
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
            v_check_exist:=0;
            SELECT COUNT(*) INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53;
            IF  v_check_exist=0 THEN 
            
            --DBMS_OUTPUT.PUT_LINE('Update old record of subs_status_map');
              UPDATE SUBS_STATUS_MAP SET STATUS_ID=53,END_DATE=inACTIVE_DATE WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID !=53 AND (END_DATE> inACTIVE_DATE OR END_DATE IS NULL);
            --DBMS_OUTPUT.PUT_LINE('Update old record of subs_offer_map');
              UPDATE SUBS_OFFER_MAP SET FROM_DATE=inACTIVE_DATE WHERE SUBSCRIBER_ID=v_SUB_ID AND PRODUCT_OFFER_ID =inOFFER_ID AND  (TO_DATE> inACTIVE_DATE OR TO_DATE IS NULL) ;
            --DBMS_OUTPUT.PUT_LINE('UPDATE ACCOUNT_VERSION ');
              UPDATE ACCOUNT_VERSION SET TO_DATE = inACTIVE_DATE,MODIFIED_DATE=inMODIFIED WHERE  SUBSCRIBER_ID=v_SUB_ID AND (TO_DATE>inACTIVE_DATE OR TO_DATE IS NULL);
            END IF;
         
      END LOOP;
      CLOSE c0;


       --DBMS_OUTPUT.PUT_LINE('Insert subscriber with new SUBSCRIBER_ID');
        INSERT INTO SUBSCRIBER (SUBSCRIBER_ID,SUBSCRIBER_NO,RATING_TYPE_ID,DATA_PART,C1_SUBSCRIBER_NO,C1_SUBSCRIBER_NO_RESET) VALUES (SUBSCRIBER_SEQ.NEXTVAL,inSUB_NO,inRATING_TYPE,SUBSTR(inSUB_NO,-1,1),inC1_SUBSCRIBER_NO,inC1_SUBSCRIBER_NO_RESET)RETURNING SUBSCRIBER.SUBSCRIBER_ID INTO v_SUB_ID;
      
      
      --DBMS_OUTPUT.PUT_LINE('Insert new record into subs_status_map');
      --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
      v_check_exist:=0;
      BEGIN
        SELECT 1 INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=2 AND START_DATE=inACTIVE_DATE AND END_DATE=inIN_ACTIVE_DATE;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;
      IF v_check_exist=0 THEN
        INSERT INTO SUBS_STATUS_MAP (SUBSCRIBER_ID,STATUS_ID, START_DATE, END_DATE) VALUES (v_SUB_ID,'2',inACTIVE_DATE ,inIN_ACTIVE_DATE );
      END IF;
      
          
     
      --DBMS_OUTPUT.PUT_LINE('Insert new record into subs_offer_map');
      
      --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
         v_check_exist:=0;
        BEGIN
              SELECT 1 INTO v_check_exist FROM SUBS_OFFER_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND PRODUCT_OFFER_ID=inOFFER_ID AND C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID AND FROM_DATE=inACTIVE_DATE AND TO_DATE=inIN_ACTIVE_DATE;
              EXCEPTION WHEN OTHERS THEN
                  NULL;
        END;
        IF v_check_exist=0 THEN
         INSERT INTO SUBS_OFFER_MAP (SUBS_OFFER_MAP_ID,SUBSCRIBER_ID, FROM_DATE, TO_DATE, PRODUCT_OFFER_ID, MODIFIED_DATE,C1_OFFER_INSTANCE_ID) VALUES (SUBS_OFFER_MAP_SEQ.NEXTVAL,v_SUB_ID, inACTIVE_DATE, v_end_date_offer, inOFFER_ID, inMODIFIED,inC1_OFFER_INSTANCE_ID);
        END IF;
      
      --DBMS_OUTPUT.PUT_LINE('Check Account Exist In ACCOUNT ');
          v_check_exist:=0;
          BEGIN
            SELECT 1 INTO v_check_exist FROM ACCOUNT WHERE ACCOUNT_ID=inC1_ACCOUNT;
          EXCEPTION WHEN OTHERS THEN
            --DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');
            NULL;
          END;
          IF v_check_exist=0 THEN
            INSERT INTO ACCOUNT(ACCOUNT_ID,CURRENCY_ID) VALUES (inC1_ACCOUNT,267);
          END IF;

          v_check_exist:=0;
          BEGIN
            SELECT 1 INTO v_check_exist FROM ACCOUNT_VERSION WHERE ACCOUNT_ID=inC1_ACCOUNT AND SUBSCRIBER_ID=v_SUB_ID AND FROM_DATE=inACTIVE_DATE AND TO_DATE=inIN_ACTIVE_DATE;
          EXCEPTION WHEN OTHERS THEN
            --DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');
            NULL;
          END;

          IF v_check_exist=0 THEN
            INSERT INTO ACCOUNT_VERSION (ACCOUNT_VERSION_ID,FROM_DATE, TO_DATE, SUBSCRIBER_ID, ACCOUNT_ID, MODIFIED_DATE, EFFECTIVE_DATE) VALUES (ACCOUNT_VERSION_SEQ.NEXTVAL,inACTIVE_DATE, inIN_ACTIVE_DATE, v_SUB_ID, inC1_ACCOUNT, inMODIFIED, inACTIVE_DATE);
          END IF;
          
--      END IF;
      EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
            --DBMS_OUTPUT.PUT_LINE('EXCEPTION');
            INS_ACTION_LOG ('DATA_SYNC-ADD_NEW_SUB',inSUB_NO||','||inOFFER_ID||','||inRATING_TYPE||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED||','||inEFFECTIVE_DATE||','||inC1_ACCOUNT ||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);    
            
  END ADD_NEW_SUB;

  PROCEDURE REMOVE_SUB(inSUB_NO IN VARCHAR2,inACTIVE_DATE IN DATE,inIN_ACTIVE_DATE IN DATE,inMODIFIED_DATE IN DATE,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2) AS
  v_check_exist INTEGER;
  v_count INTEGER;
  CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET);
  
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.REMOVE_SUB
    
    
          
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
          UPDATE ACCOUNT_VERSION SET TO_DATE = inIN_ACTIVE_DATE,MODIFIED_DATE=inMODIFIED_DATE WHERE  SUBSCRIBER_ID=v_SUB_ID AND (TO_DATE>inIN_ACTIVE_DATE OR TO_DATE IS NULL);
          
          v_check_exist:=0;
            SELECT COUNT(*) INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53;
            IF  v_check_exist=0 THEN    
            
                --DBMS_OUTPUT.PUT_LINE('UPDATE OLD RECORD');
                UPDATE SUBS_STATUS_MAP SET STATUS_ID=53,END_DATE= inIN_ACTIVE_DATE WHERE  SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID !=53  AND  (END_DATE IS NULL OR END_DATE>=inIN_ACTIVE_DATE);
                v_count:=SQL%ROWCOUNT;
                IF v_count = 0 THEN
                  
                    --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
                    v_check_exist:=0;
                    BEGIN
                        SELECT 1 INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53 AND START_DATE=inACTIVE_DATE AND END_DATE=inIN_ACTIVE_DATE;
                        EXCEPTION WHEN OTHERS THEN
                            NULL;
                        END;
                    IF v_check_exist=0 THEN
                        INSERT INTO SUBS_STATUS_MAP(SUBSCRIBER_ID,STATUS_ID,START_DATE,END_DATE) VALUES (v_SUB_ID,53,inACTIVE_DATE,inIN_ACTIVE_DATE);
                    END IF;
                    
                    
                    
                END IF;
          END IF;
         
      END LOOP;
      IF c0%ROWCOUNT=0 THEN 
          INS_ACTION_LOG ('DATA_SYNC-REMOVE_SUB',inSUB_NO||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'NOT FOUND DATA', 4);
      END IF;
      
      CLOSE c0;
    
 
     EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
            INS_ACTION_LOG ('DATA_SYNC-REMOVE_SUB',inSUB_NO||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);
    
  END REMOVE_SUB;


  PROCEDURE UPDATE_SUB_STATUS(inSUB_NO IN VARCHAR2,in_OLD_STATUS IN NUMBER,in_NEW_STATUS IN NUMBER,inMODIFIED_DATE IN DATE,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2) AS
  v_check_exist INTEGER;
  
  
  CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET);
  
  BEGIN

      
      --INS_ACTION_LOG ('DATA_SYNC','UPDATE_SUB_STATUS','ERROR CODE: ' || SQLCODE || '; DETAIL: ' || inSUB_NO, 4);      
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
            v_check_exist:=0;
            SELECT COUNT(*) INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53;
            IF  v_check_exist=0 THEN          
                  --DBMS_OUTPUT.PUT_LINE('UPDATE OLD RECORD');
                  UPDATE SUBS_STATUS_MAP SET END_DATE= inMODIFIED_DATE WHERE  SUBSCRIBER_ID=v_SUB_ID AND (END_DATE IS NULL OR END_DATE>inMODIFIED_DATE); 
                  
                  --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
                  v_check_exist:=0;
                  BEGIN
                      SELECT 1 INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=in_NEW_STATUS AND START_DATE=inMODIFIED_DATE;
                      EXCEPTION WHEN OTHERS THEN
                          NULL;
                  END;
                  IF v_check_exist=0 THEN
                      INSERT INTO SUBS_STATUS_MAP(SUBSCRIBER_ID,STATUS_ID,START_DATE) VALUES (v_SUB_ID,in_NEW_STATUS,inMODIFIED_DATE);
                  END IF;
            END IF;
         
      END LOOP;
      IF c0%ROWCOUNT=0 THEN 
                      INS_ACTION_LOG ('DATA_SYNC-UPDATE_SUB_STATUS',inSUB_NO||','||in_OLD_STATUS||','||in_NEW_STATUS||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'NOT FOUND DATA', 4);
      END IF;
  
      CLOSE c0;
      
  
      EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
            INS_ACTION_LOG ('DATA_SYNC-UPDATE_SUB_STATUS',inSUB_NO||','||in_OLD_STATUS||','||in_NEW_STATUS||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);
  END UPDATE_SUB_STATUS;

  PROCEDURE ADD_NEW_OFFER(inSUB_NO IN VARCHAR2,inOFFER_ID IN VARCHAR2,inACTIVE_DATE IN DATE,inIN_ACTIVE_DATE IN DATE,inMODIFIED IN DATE,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2) AS
  v_check_exist INTEGER;
  v_offer_duration NUMBER;
  v_offer_unit VARCHAR2(10);
  v_end_date_offer DATE;
  CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET);
  
  BEGIN
  
  
      v_offer_duration:=0;
      v_offer_unit:='UNKNOWN';

     IF inIN_ACTIVE_DATE IS NULL THEN
        BEGIN
          SELECT AUTO_EXPIRATION_DURATION,AUTO_EXPIRATION_UNIT INTO v_offer_duration,v_offer_unit  FROM PRODUCT_OFFER WHERE OFFER_ID=inOFFER_ID; 
          EXCEPTION WHEN OTHERS THEN
            --DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');
            NULL;
        END;
         v_end_date_offer:=ADD_TIMES(inACTIVE_DATE,v_offer_duration,v_offer_unit);
     ELSE v_end_date_offer:=inIN_ACTIVE_DATE;
     END IF;
    
    
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
            v_check_exist:=0;
            --SELECT COUNT(*) INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53;
            --IF  v_check_exist=0 THEN  
                 --DBMS_OUTPUT.PUT_LINE('UPDATE OLD RECORD');
                 UPDATE SUBS_OFFER_MAP SET TO_DATE = inACTIVE_DATE, MODIFIED_DATE = inMODIFIED  WHERE SUBSCRIBER_ID = v_SUB_ID AND PRODUCT_OFFER_ID =inOFFER_ID AND (TO_DATE > inACTIVE_DATE OR TO_DATE IS NULL);
                 
                 --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
                v_check_exist:=0;
                BEGIN
                      SELECT 1 INTO v_check_exist FROM SUBS_OFFER_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND PRODUCT_OFFER_ID=inOFFER_ID AND C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID AND FROM_DATE=inACTIVE_DATE AND TO_DATE=v_end_date_offer;
                      EXCEPTION WHEN OTHERS THEN
                          NULL;
                END;
                IF v_check_exist=0 THEN
                      INSERT INTO SUBS_OFFER_MAP(SUBS_OFFER_MAP_ID,SUBSCRIBER_ID,PRODUCT_OFFER_ID,FROM_DATE,TO_DATE,MODIFIED_DATE,C1_OFFER_INSTANCE_ID) VALUES(SUBS_OFFER_MAP_SEQ.NEXTVAL,v_SUB_ID,inOFFER_ID,inACTIVE_DATE,v_end_date_offer,inMODIFIED,inC1_OFFER_INSTANCE_ID);
                END IF;
            --END IF;
      END LOOP;
      IF c0%ROWCOUNT=0 THEN 
            INS_ACTION_LOG ('DATA_SYNC-ADD_NEW_OFFER',inSUB_NO||','||inOFFER_ID||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'NOT FOUND DATA', 4);   
      END IF;
      CLOSE c0;
         
  
    
    
    EXCEPTION WHEN OTHERS THEN
              ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-ADD_NEW_OFFER',inSUB_NO||','||inOFFER_ID||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);   
    END ADD_NEW_OFFER;

  PROCEDURE REMOVE_OFFER(inSUB_NO IN VARCHAR2,inOFFER_ID IN VARCHAR2,inACTIVE_DATE IN DATE,inIN_ACTIVE_DATE IN DATE, inMODIFIED_DATE IN DATE,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2) AS
   v_count INTEGER;
   v_check_exist INTEGER;
    
   CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET);
  
  BEGIN

      
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
          v_check_exist:=0;
          --SELECT COUNT(*) INTO v_check_exist FROM SUBS_STATUS_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND STATUS_ID=53;
          --IF  v_check_exist=0 THEN  
                  UPDATE SUBS_OFFER_MAP SET TO_DATE = inIN_ACTIVE_DATE, MODIFIED_DATE = inMODIFIED_DATE  WHERE SUBSCRIBER_ID = v_SUB_ID AND PRODUCT_OFFER_ID =inOFFER_ID AND C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID AND (TO_DATE >= inIN_ACTIVE_DATE OR TO_DATE IS NULL);
                  v_count:=SQL%ROWCOUNT;
                  IF v_count = 0 THEN
                     --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
                      v_check_exist:=0;
                      BEGIN
                        SELECT 1 INTO v_check_exist FROM SUBS_OFFER_MAP WHERE SUBSCRIBER_ID=v_SUB_ID AND PRODUCT_OFFER_ID=inOFFER_ID AND C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID AND FROM_DATE=inACTIVE_DATE  AND TO_DATE=inIN_ACTIVE_DATE ;
                      EXCEPTION WHEN OTHERS THEN
                            NULL;
                      END;
                      IF v_check_exist=0 THEN
                          INSERT INTO SUBS_OFFER_MAP(SUBS_OFFER_MAP_ID,SUBSCRIBER_ID,FROM_DATE,TO_DATE,PRODUCT_OFFER_ID,MODIFIED_DATE,C1_OFFER_INSTANCE_ID)
                                      VALUES(SUBS_OFFER_MAP_SEQ.NEXTVAL,v_SUB_ID,inACTIVE_DATE,inIN_ACTIVE_DATE,inOFFER_ID,inMODIFIED_DATE,inC1_OFFER_INSTANCE_ID);
                      END IF;
                  END IF;
          --END IF;
      END LOOP;
      IF c0%ROWCOUNT=0 THEN 
          INS_ACTION_LOG ('DATA_SYNC-REMOVE_OFFER',inSUB_NO||','||inOFFER_ID||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'NOT FOUND DATA', 4);     
      END IF;      
      CLOSE c0;
      

    EXCEPTION WHEN OTHERS THEN
              ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-REMOVE_OFFER',inSUB_NO||','||inOFFER_ID||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE||','||inMODIFIED_DATE||','||inC1_ACCOUNT||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);  
  END REMOVE_OFFER;


  PROCEDURE ADD_CALLING_CIRCLE(inCALLING_CIRCLE_ID IN VARCHAR2,inCALLING_CIRCLE_NAME IN VARCHAR2, inMAX_SIZE IN INTEGER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.ADD_CALLING_CIRCLE
     INSERT INTO CALLING_CIRCLE(CALLING_CIRCLE_ID,CALLING_CIRCLE_NAME,MAX_SIZE) VALUES(inCALLING_CIRCLE_ID,inCALLING_CIRCLE_NAME,inMAX_SIZE); 
        EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-ADD_CALLING_CIRCLE',inCALLING_CIRCLE_ID||','||inCALLING_CIRCLE_NAME||','||inMAX_SIZE,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4); 
  END ADD_CALLING_CIRCLE;



  PROCEDURE ADD_CALLING_CIRCLE_MEMBER(inCALLING_CIRCLE_ID IN VARCHAR2,inSUB_NO IN VARCHAR2,inMEMBER_TYPE IN INTEGER,inMODIFIED_DATE IN DATE,inSTATUS IN NUMBER,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2) AS
  v_check_exist INTEGER;
  
  CURSOR c0 IS ( SELECT distinct SUBSCRIBER_ID FROM SUBSCRIBER  WHERE SUBSCRIBER_NO =inSUB_NO and C1_SUBSCRIBER_NO=inC1_SUBSCRIBER_NO and C1_SUBSCRIBER_NO_RESET=inC1_SUBSCRIBER_NO_RESET);
  
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.ADD_CALLING_CIRCLE_MEMBER
    
    --SELECT SUBSCRIBER_ID INTO v_SUB_ID  FROM SUBSCRIBER WHERE SUBSCRIBER_NO = inSUB_NO;
    
                --DBMS_OUTPUT.PUT_LINE('CHECK EXIST OF CALLING_CIRCLE');
                v_check_exist:=0;
                BEGIN
                      SELECT 1 INTO v_check_exist FROM CALLING_CIRCLE WHERE CALLING_CIRCLE_ID=inCALLING_CIRCLE_ID;
                      EXCEPTION WHEN OTHERS THEN
                          NULL;
                END;
                IF v_check_exist=0 THEN
                      INSERT INTO CALLING_CIRCLE (CALLING_CIRCLE_ID, STATUS_ID) VALUES (inCALLING_CIRCLE_ID, '1');

                END IF;
      OPEN c0;
      LOOP
          FETCH c0 INTO  v_SUB_ID;
          EXIT WHEN c0%NOTFOUND;
                --DBMS_OUTPUT.PUT_LINE('CHECK EXIST BEFORE INSERT TO AVOID DUPLICATE');
                v_check_exist:=0;
                BEGIN
                      SELECT 1 INTO v_check_exist FROM CALLING_CIRCLE_MEMBER WHERE CALLING_CIRCLE_ID=inCALLING_CIRCLE_ID AND SUBSCRIBER_ID= v_SUB_ID AND STATUS_ID=inSTATUS AND MODIFIED_DATE= inMODIFIED_DATE;
                      EXCEPTION WHEN OTHERS THEN
                          NULL;
                END;
                IF v_check_exist=0 THEN
                      INSERT INTO CALLING_CIRCLE_MEMBER(CALLING_CIRCLE_ID,SUBSCRIBER_ID,MEMBER_TYPE,MODIFIED_DATE,STATUS_ID) VALUES(inCALLING_CIRCLE_ID,v_SUB_ID,inMEMBER_TYPE,inMODIFIED_DATE,inSTATUS); 
                END IF;
      END LOOP;
      IF c0%ROWCOUNT=0 THEN 
              INS_ACTION_LOG ('DATA_SYNC-ADD_CALLING_CIRCLE_MEMBER',inCALLING_CIRCLE_ID||','||inSUB_NO||','||inMEMBER_TYPE||','||inMODIFIED_DATE||','||inSTATUS||','||inC1_ACCOUNT ||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'NOT FOUND DATA', 4);  
      END IF;       
      CLOSE c0;         
        EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-ADD_CALLING_CIRCLE_MEMBER',inCALLING_CIRCLE_ID||','||inSUB_NO||','||inMEMBER_TYPE||','||inMODIFIED_DATE||','||inSTATUS||','||inC1_ACCOUNT ||','||inC1_SUBSCRIBER_NO||','||inC1_SUBSCRIBER_NO_RESET,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);  
  END ADD_CALLING_CIRCLE_MEMBER;


PROCEDURE ADD_CALLING_CIRCLE_MEMBER_TMP(inCALLING_CIRCLE_ID IN VARCHAR2,inSUB_NO IN VARCHAR2,inMEMBER_TYPE IN INTEGER,inMODIFIED_DATE IN DATE,inSTATUS IN NUMBER,inC1_ACCOUNT IN VARCHAR2,inC1_SUBSCRIBER_NO IN VARCHAR2,inC1_SUBSCRIBER_NO_RESET IN VARCHAR2) AS
  v_check_exist INTEGER;
  
  
BEGIN

      INSERT INTO CALLING_CIRCLE_MEMBER_TMP(CALLING_CIRCLE_ID,MSISDN,MEMBER_TYPE,MODIFIED_DATE,STATUS_ID,C1_SUBSCRIBER_NO,C1_SUBSCRIBER_NO_RESET) VALUES(inCALLING_CIRCLE_ID,inSUB_NO,inMEMBER_TYPE,inMODIFIED_DATE,inSTATUS,inC1_SUBSCRIBER_NO,inC1_SUBSCRIBER_NO_RESET); 

        EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC','ADD_CALLING_CIRCLE_MEMBER ' ||inSUB_NO,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4);  
END ADD_CALLING_CIRCLE_MEMBER_TMP;


  PROCEDURE GET_LAST_SYNC_TIME(outSYNC_TIME OUT DATE) AS
   
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.GET_LAST_SYNC_TIME
       
       select sync_time into outSYNC_TIME from data_sync_time where sync_time in (select max(sync_time) from data_sync_time where status_id=1);
      
  END GET_LAST_SYNC_TIME;
  
  PROCEDURE UPDATE_LAST_SYNC_TIME_STATUS(inSYNCTIME IN DATE,status IN INTEGER) AS
   v_check_exist INTEGER;
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.UPDATE_LAST_SYNC_TIME
      
      v_check_exist:=0;
      IF status=0 THEN
      
        BEGIN
        SELECT 1 INTO v_check_exist from data_sync_time where sync_time=inSYNCTIME and status_id=0;
        
        EXCEPTION WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');
          NULL;
        
        END;
        IF v_check_exist=0 THEN
          INSERT INTO data_sync_time(sync_time,status_id) VALUES(inSYNCTIME,status);
        END IF;
        
      ELSE IF status!=0
              THEN UPDATE data_sync_time SET status_id =status WHERE sync_time=inSYNCTIME;
        END IF;
      END IF;
      
      
      
        EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-UPDATE_LAST_SYNC_TIME_STATUS',inSYNCTIME||','||status,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4); 
      
  END UPDATE_LAST_SYNC_TIME_STATUS;


  FUNCTION ADD_TIMES (in_DATE IN DATE, in_VALUE   IN NUMBER,in_TYPE    IN VARCHAR2) RETURN DATE AS
  v_Date DATE;
  BEGIN
    IF in_TYPE='MONTHS' THEN
    v_Date:= ADD_MONTHS(in_DATE,in_VALUE);
    ELSIF in_TYPE='YEARS' THEN
    v_Date:= ADD_MONTHS(in_DATE,12*in_VALUE);
    ELSE v_Date:=NULL;
    END IF;
    RETURN v_Date;
  END ADD_TIMES;
  


  PROCEDURE ADD_NEW_ACCOUNT_OFFER(inACCOUNT_ID IN VARCHAR2,inOFFER_ID IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2,inOFFER_TYPE IN VARCHAR2,inACTIVE_DATE IN DATE, inIN_ACTIVE_DATE IN DATE) AS
  v_check_exist NUMBER;
  BEGIN
  
      v_check_exist:=0;
      BEGIN
            SELECT 1 INTO v_check_exist FROM ACCOUNT_OFFER_MAP WHERE C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID;
            EXCEPTION WHEN OTHERS THEN
                NULL;
      END;
      IF v_check_exist=0 THEN
      INSERT INTO  ACCOUNT_OFFER_MAP(ACCOUNT_ID,OFFER_ID,C1_OFFER_INSTANCE_ID,OFFER_TYPE,ACTIVE_DATE,IN_ACTIVE_DATE) 
                  VALUES(inACCOUNT_ID,inOFFER_ID,inC1_OFFER_INSTANCE_ID,inOFFER_TYPE,inACTIVE_DATE,inIN_ACTIVE_DATE);
      END IF;
      EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-ADD_NEW_ACCOUNT_OFFER',inACCOUNT_ID||','||inOFFER_ID||','||inC1_OFFER_INSTANCE_ID||','||inOFFER_TYPE||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4); 
      
  END ADD_NEW_ACCOUNT_OFFER;

  PROCEDURE REMOVE_ACCOUNT_OFFER(inACCOUNT_ID IN VARCHAR2,inOFFER_ID IN VARCHAR2,inC1_OFFER_INSTANCE_ID IN VARCHAR2,inOFFER_TYPE IN VARCHAR2,inACTIVE_DATE IN DATE, inIN_ACTIVE_DATE IN DATE) AS
  v_count NUMBER;
  BEGIN
    -- TODO: Implementation required for PROCEDURE ELC_SUBS_OFFER_SYNC.REMOVE_ACCOUNT_OFFER
     v_count:=0;
     UPDATE ACCOUNT_OFFER_MAP SET IN_ACTIVE_DATE=inIN_ACTIVE_DATE WHERE C1_OFFER_INSTANCE_ID=inC1_OFFER_INSTANCE_ID;
     v_count:=SQL%ROWCOUNT;
     IF v_count=0 THEN
     INSERT INTO  ACCOUNT_OFFER_MAP(ACCOUNT_ID,OFFER_ID,C1_OFFER_INSTANCE_ID,OFFER_TYPE,ACTIVE_DATE,IN_ACTIVE_DATE) 
                  VALUES(inACCOUNT_ID,inOFFER_ID,inC1_OFFER_INSTANCE_ID,inOFFER_TYPE,inACTIVE_DATE,inIN_ACTIVE_DATE);
     END IF;
     EXCEPTION WHEN OTHERS THEN
             -- ROLLBACK;
              INS_ACTION_LOG ('DATA_SYNC-REMOVE_ACCOUNT_OFFER',inACCOUNT_ID||','||inOFFER_ID||','||inC1_OFFER_INSTANCE_ID||','||inOFFER_TYPE||','||inACTIVE_DATE||','||inIN_ACTIVE_DATE,'ERROR CODE: ' || SQLCODE || '; DETAIL: ' || SQLERRM, 4); 
      
  END REMOVE_ACCOUNT_OFFER;

END ELC_SUBS_OFFER_SYNC;
/
