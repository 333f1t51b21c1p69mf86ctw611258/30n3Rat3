package e1reformat.db.dao;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import e1reformat.db.pool.DBConfig;
import e1reformat.db.pool.DBPool;
import e1reformat.entity.output.ChecksumErrorEntity;
import e1reformat.gui.util.LogItem;
import e1reformat.util.DateUtils;
import e1reformat.util.IConstant;
import java.util.logging.Level;

public class CdrLogProcessDAO {

    private static Logger logger = Logger.getLogger("CdrLogProcessDAO");
    public static final int SUCCESS = 0;
    public static final int FAIL = -1;
    public static final int EXCEPTION = -2;
    private static DBConfig dbconfig = new DBConfig();
    public static Integer cdrLogProcessId;

    public static Integer logCDRFileProcess(String sourceFileUrl, File destinationFile, String status, String startTime, String endTime, Integer method, String sourceFileBehavior, String backupFileUrl, Connection conn) {
        PreparedStatement stmt = null;
        cdrLogProcessId = getNextSequenceValue(conn);
        String query = "INSERT INTO " + dbconfig.getDb_schema() + "CDR_LOG_PROCESS (CDR_LOG_PROCESS_ID , SOURCE_FILE_URL, OUTPUT_FILE_URL, START_TIME, STATUS, METHOD, SOURCE_FILE_BEHAVIOR, BACKUP_FILE_URL)"
                + " VALUES (?,?,?,SYSDATE,?,?,?,?)";

        try {
            conn.setAutoCommit(false);
            stmt = conn.prepareStatement(query);
            stmt.setInt(1, cdrLogProcessId);
            stmt.setString(2, sourceFileUrl);
            if (destinationFile != null) {
                stmt.setString(3, destinationFile.getAbsolutePath());
            } else {
                stmt.setString(3, null);
            }
            stmt.setString(4, status);
            stmt.setString(5, method.toString());
            stmt.setString(6, sourceFileBehavior);
            stmt.setString(7, backupFileUrl);

            stmt.execute();
            conn.commit();
        } catch (Exception e) {
            logger.error("Exception", e);
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
        }
        return cdrLogProcessId;
    }

    public static int updateCDRProcess(Integer cdrLogProcessId, String sourceFileUrl, File destinationFile,
            String status, String startTime, String endTime, Integer method,
            String sourceFileBehavior, String backupFileUrl, Connection conn, String fileHandle, int totalCdr, int totalCdrProcessed) {

        PreparedStatement stmt = null;
        StringBuilder query = new StringBuilder("");
        query.append("Update " + dbconfig.getDb_schema() + "CDR_LOG_PROCESS ");
        query.append("set SOURCE_FILE_URL = ?, ");
        query.append("OUTPUT_FILE_URL = ?, ");
        query.append("END_TIME = SYSDATE, ");
        query.append("STATUS = ?, ");
        query.append("METHOD = ?, ");
        query.append("SOURCE_FILE_BEHAVIOR = ?, ");
        query.append("BACKUP_FILE_URL = ?, ");
        query.append("IS_HANDLED = ?, ");
        query.append("TOTAL_CDR = ?, ");
        query.append("TOTAL_CDR_PROCESSED = ? ");
        query.append("Where CDR_LOG_PROCESS_ID = " + cdrLogProcessId);

        try {
            stmt = conn.prepareStatement(query.toString());
            stmt.setString(1, sourceFileUrl);
            if (destinationFile != null) {
                stmt.setString(2, destinationFile.getAbsolutePath());
            } else {
                stmt.setString(2, null);
            }
            stmt.setString(3, status);
            stmt.setString(4, method.toString());
            stmt.setString(5, sourceFileBehavior);
            stmt.setString(6, backupFileUrl);
            stmt.setInt(7, Integer.parseInt(fileHandle));
            stmt.setInt(8, totalCdr);
            stmt.setInt(9, totalCdrProcessed);
            stmt.execute();
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception", e);
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(CdrLogProcessDAO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return SUCCESS;
    }

    /**
     * @param conn
     * @param getNextSequenceValue
     * @return Integer
     */
    protected static Integer getNextSequenceValue(Connection conn) {
        PreparedStatement stmt = null;
        Integer cdrRecordHeaderId = 0;
        ResultSet rs = null;
        try {
            String SQL_PREP_SEL = "SELECT " + dbconfig.getDb_schema() + "CDR_LOG_PROCESS_SEQ.NEXTVAL FROM DUAL ";
            stmt = conn.prepareStatement(SQL_PREP_SEL);
            stmt.execute();
            rs = stmt.getResultSet();
            if (rs.next()) {
                cdrRecordHeaderId = rs.getInt(1);
            }
        } catch (Exception e) {
            logger.error("Exception", e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException ex) {
                ex.fillInStackTrace();
            }
        }
        return cdrRecordHeaderId;
    }

    public static ArrayList<ChecksumErrorEntity> getListProcessDetail(Date fromDate, Date toDate, String status) {
        ArrayList<ChecksumErrorEntity> listCdrProcess = new ArrayList<ChecksumErrorEntity>();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            Calendar cal = Calendar.getInstance();
            cal.setTime(toDate);
            cal.add(Calendar.DATE, 1);
            Date _toDate = cal.getTime();

            conn = getConnection(dbconfig);
            StringBuilder query = new StringBuilder("");
            query.append("SELECT a.cdr_log_process_id, a.source_file_url, a.start_time, a.is_handled, a.total_cdr, a.total_cdr_processed, b.start_rcd_seq, b.end_rcd_seq, a.status ");
            query.append("FROM CDR_LOG_PROCESS a, CDR_RECORD_HEADER b ");
            query.append("WHERE a.CDR_LOG_PROCESS_ID = b.CDR_RECORD_HEADER_ID ");
            query.append("AND a.start_time >= to_date( ? ,'DD/MM/YYYY') ");
            query.append("AND a.start_time <= to_date( ? ,'DD/MM/YYYY') ");

            if (!StringUtils.isEmpty(status)) {
                if (status.equalsIgnoreCase(IConstant.SUMMARY_TABLE_SEARCH.IN_PROCESS)) {
                    query.append("AND status IN (" + IConstant.CDR_PROCESSING_STATUS.LOADED + "," + IConstant.CDR_PROCESSING_STATUS.CONVERTED + ")");
                } else if (status.equalsIgnoreCase(IConstant.SUMMARY_TABLE_SEARCH.CONTENT_ERROR)) {
                    query.append("AND status IN (" + IConstant.REFORMATING_ERROR_CODE.EXCEPTION + "," + IConstant.REFORMATING_ERROR_CODE.INVALID_HEADER_CONTENT + ")");
                } else if (status.equalsIgnoreCase(IConstant.SUMMARY_TABLE_SEARCH.ERROR)) {
                    query.append("AND status IN (" + IConstant.REFORMATING_ERROR_CODE.EXCEPTION + "," + IConstant.REFORMATING_ERROR_CODE.INVALID_HEADER_CONTENT + "," + IConstant.REFORMATING_ERROR_CODE.INVALID_CHECKSUM_VALUE + ")");
                } else {
                    query.append("AND status = " + status);
                }
            }

            query.append(" ORDER BY a.start_time DESC");

            pstmt = conn.prepareStatement(query.toString());
            pstmt.setString(1, DateUtils.getDateStringInformat(fromDate, DateUtils.ddMMYYYY_FULL_SLASH));
            pstmt.setString(2, DateUtils.getDateStringInformat(_toDate, DateUtils.ddMMYYYY_FULL_SLASH));

            rs = pstmt.executeQuery();
            while (rs.next()) {
                int cdrLogProcessId = rs.getInt("cdr_log_process_id");
                String sourceFileUrl = rs.getString("source_file_url");
                Date startTime = rs.getTimestamp("start_time");
                String isHandled = rs.getString("is_handled");
                int totalCdr = rs.getInt("total_cdr");
                int totalCdrProcessed = rs.getInt("total_cdr_processed");
                String start_rcd_seq = rs.getString("start_rcd_seq");
                String end_rcd_seq = rs.getString("end_rcd_seq");
                String status_ = rs.getString("status");

                ChecksumErrorEntity checksumErrorEntity = new ChecksumErrorEntity(cdrLogProcessId, sourceFileUrl, startTime, status_, isHandled, totalCdr, start_rcd_seq, end_rcd_seq);
                checksumErrorEntity.setTotalCdrProcessed(totalCdrProcessed);
                listCdrProcess.add(checksumErrorEntity);
            }
        } catch (Exception e) {
            logger.error("Exception", e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                releaseConnection(conn, pstmt);
            } catch (SQLException ex) {
                ex.fillInStackTrace();
            }
        }
        return listCdrProcess;
    }

    public static int updateToCdrProcess(ArrayList<LogItem> listUpdateItem) {
        PreparedStatement stmt = null;
        Connection conn = null;
        StringBuilder query = new StringBuilder("");
        query.append("update " + dbconfig.getDb_schema() + "CDR_LOG_PROCESS ");
        query.append("set IS_HANDLED = case CDR_LOG_PROCESS_ID ");
        for (LogItem logItem : listUpdateItem) {
            query.append("when " + logItem.getCdrLogProcessId() + " then " + logItem.getIsHanlded() + " ");
        }
        query.append("end ");
        query.append("where CDR_LOG_PROCESS_ID in (");
        String condition = "";
        for (LogItem logItem : listUpdateItem) {
            condition = condition + logItem.getCdrLogProcessId() + ",";
        }
        condition = StringUtils.substringBeforeLast(condition, ",") + ")";
        query.append(condition);
        try {
            conn = getConnection(dbconfig);
            stmt = conn.prepareStatement(query.toString());
            stmt.execute();
            conn.commit();
        } catch (Exception e) {
            logger.error("Exception", e);
            return -1;
        } finally {
            releaseConnection(conn, stmt);
        }

        return 0;
    }

    public static Connection getConnection(DBConfig dbconfig) throws SQLException {
        return DBPool.getConnection(dbconfig);
    }

    public static void releaseConnection(Connection conn, PreparedStatement preStmt) {
        DBPool.releaseConnection(conn, preStmt);
    }
}
