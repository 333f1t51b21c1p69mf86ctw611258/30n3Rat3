/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Test;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;

/**
 *
 * @author thai
 */
public class TestWriteFile {

    private static String FILE_PATH = "";

    public static void main(String[] args) {
        try {
            File file = createFile();
            long startTime = System.currentTimeMillis();
            writeToFileNIOWay2(file);
//            writeToFileIOWay(file);
            long endTime = System.currentTimeMillis();
            System.out.println("Total Time is  " + (endTime - startTime));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public static void writeToFileNIOWay(File file) throws IOException {
        FileOutputStream fileOutputStream = new FileOutputStream(file, true);
        FileChannel fileChannel = fileOutputStream.getChannel();
        ByteBuffer byteBuffer = null;
        String messageToWrite = null;
        for (int i = 1; i < 1000000; i++) {
            messageToWrite = "Thaiha";
            byteBuffer = ByteBuffer.wrap(messageToWrite.getBytes(Charset.forName("ISO-8859-1")));
            fileChannel.write(byteBuffer);
        }
    }

    public static void writeToFileNIOWay2(File file) throws IOException {
        final int numberOfIterations = 100;
        final String messageToWrite = "Thaiha\n";
        final byte[] messageBytes = messageToWrite.getBytes(Charset.forName("ISO-8859-1"));
        final long appendSize = numberOfIterations * messageBytes.length;
        final RandomAccessFile raf = new RandomAccessFile(file, "rw");
        raf.seek(raf.length());
        final FileChannel fc = raf.getChannel();
        final MappedByteBuffer mbf = fc.map(FileChannel.MapMode.READ_WRITE, fc.position(), appendSize);
        fc.close();
        for (int i = 1; i < numberOfIterations; i++) {
            mbf.put(messageBytes);
        }
    }

    public static void writeToFileIOWay(File file) throws IOException {
        FileOutputStream fileOutputStream = new FileOutputStream(file, true);
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(
                fileOutputStream, 128 * 100);
        String messageToWrite = null;
        for (int i = 1; i < 1000000; i++) {
            messageToWrite = "This is a test üüüüüüööööö";
            bufferedOutputStream.write(messageToWrite.getBytes(Charset.forName("ISO-8859-1")));
        }
        bufferedOutputStream.flush();
        fileOutputStream.close();
    }

    private static File createFile() throws IOException {
        File file = new File(FILE_PATH + "test_sixth_one.txt");
        file.createNewFile();
        return file;
    }
}
