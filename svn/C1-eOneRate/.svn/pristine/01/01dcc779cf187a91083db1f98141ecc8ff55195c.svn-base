package e1reformat.db.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import e1reformat.db.pool.DBConfig;
import e1reformat.entity.enrich.MapZone;
import e1reformat.util.ReturnObject;
import org.apache.log4j.Logger;
//import java.util.logging.Level;
//import java.util.logging.Logger;

public class ZoneMapDAO {

    private static Logger logger = Logger.getLogger("ZoneMapDAO");
    private static DBConfig dbconfig = new DBConfig();
    private static ReturnObject returnObject;
    static int SUCCESS = 0;
    static int ERROR = -1;
    static String schemaCommon = dbconfig.getDb_Common();

    public static ArrayList<MapZone> getListZoneMap(Connection conn) {

        ArrayList<MapZone> searchResult = new ArrayList<MapZone>();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT code,zone,nw_group,payment_id from " + schemaCommon + "NW_ZONE_MAP ORDER BY code";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                MapZone zoneMap = new MapZone(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4));
                searchResult.add(zoneMap);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }
        return searchResult;
    }

    public static ArrayList<MapZone> getSearchZoneMap(String code, Connection conn) {

        ArrayList<MapZone> searchResult = new ArrayList<MapZone>();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT code,zone,nw_group,payment_id FROM " + schemaCommon + "NW_ZONE_MAP where code like '%" + code + "%' ORDER BY code";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                MapZone zoneMap = new MapZone(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4));
                searchResult.add(zoneMap);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        return searchResult;
    }

    public static ReturnObject createQuickZoneMap(MapZone mapZone, Connection conn) {
        returnObject = new ReturnObject();
        PreparedStatement stmt = null;
        try {
            String sql = "INSERT INTO " + schemaCommon + "NW_ZONE_MAP(code, zone, nw_group,payment_id) ";
            sql += " VALUES('" + mapZone.getCode();
            sql += "','" + mapZone.getZone();
            sql += "','" + mapZone.getNwGroup();
            sql += "','" + mapZone.getPayment_id();
            sql += "')";
            stmt = conn.prepareStatement(sql);
            stmt.execute(sql);
            conn.commit();
        } catch (SQLException e) {
            System.out.println("Exception: " + e.getMessage());
            returnObject.setReturnValue(e.getErrorCode());
            returnObject.setErrorCode(e.getMessage());
            returnObject.setErrorDesc("Error when Insert Zone Map ");
            return returnObject;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException ex) {
                logger.error("sql exception",ex.fillInStackTrace());
            }
        }
        returnObject.setReturnValue(SUCCESS);
        returnObject.setErrorCode(null);
        return returnObject;
    }

    public static Boolean checkExistCode(String code, Connection conn) {

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int result = 0;
        try {
            String query = "SELECT count(*) FROM " + schemaCommon + "NW_ZONE_MAP where code = '" + code + "'";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery(query);
            rs.next();
            result = rs.getInt(1);
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                ex.fillInStackTrace();
            }
        }

        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }

    public static ReturnObject updateZoneMap(MapZone mapZone, Connection conn) {
        PreparedStatement stmt = null;
        returnObject = new ReturnObject();
        try {
            String sql = "UPDATE " + schemaCommon + "NW_ZONE_MAP";
            sql += " SET zone='" + mapZone.getZone() + "' ,nw_group ='" + mapZone.getNwGroup() + "',payment_id = '" + mapZone.getPayment_id() + "'";
            sql += " WHERE code = '" + mapZone.getCode() + "'";
            //Check deadlock before update
            stmt = conn.prepareStatement("select 1 from " + schemaCommon + " NW_ZONE_MAP where code = '" + mapZone.getCode() + "' for update nowait");
            stmt.execute();
            //End deadlock before update
            stmt = conn.prepareStatement(sql);
            stmt.executeUpdate(sql);
            conn.commit();
        } catch (SQLException e) {
            System.out.println("Exception: " + e.getMessage());
            returnObject.setReturnValue(e.getErrorCode());
            returnObject.setErrorCode(e.getMessage());
            returnObject.setErrorDesc("Error when updating Zone Map ");
            return returnObject;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException ex) {
                ex.fillInStackTrace();
            }
        }
        returnObject.setReturnValue(SUCCESS);
        returnObject.setErrorCode(null);
        return returnObject;
    }

    public static ReturnObject deleteZoneMap(String code, Connection conn) {
        returnObject = new ReturnObject();
        PreparedStatement stmt = null;
        try {
            String sql = "DELETE FROM " + schemaCommon + "NW_ZONE_MAP ";
            sql += " WHERE code = '" + code + "'";
            stmt = conn.prepareStatement(sql);
            stmt.executeQuery(sql);
            conn.commit();
        } catch (SQLException e) {
            System.out.println("Exception: " + e.getMessage());
            returnObject.setReturnValue(e.getErrorCode());
            returnObject.setErrorCode(e.getMessage());
            returnObject.setErrorDesc("Error when delete Zone Map ");
            return returnObject;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException ex) {
                ex.fillInStackTrace();
            }
        }
        returnObject.setReturnValue(SUCCESS);
        returnObject.setErrorCode(null);
        return returnObject;
    }

}
