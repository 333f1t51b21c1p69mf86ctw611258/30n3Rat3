package e1reformat.db.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import e1reformat.db.pool.DBConfig;
import e1reformat.entity.enrich.PrefixB_Number;

public class PrefixB_NumberDAO {

    private static DBConfig dbconfig = new DBConfig();
    static int SUCCESS = 0;
    static int ERROR = -1;
    static String schemaCommon = dbconfig.getDb_Common();

    public static ArrayList<PrefixB_Number> getListPrefix(Connection conn) {

        ArrayList<PrefixB_Number> searchResult = new ArrayList<PrefixB_Number>();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT prefix, change,prefix_enrich_id FROM " + schemaCommon + "prefix_enrich";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                PrefixB_Number prefix = new PrefixB_Number(rs.getString(1), rs.getString(2), rs.getInt(3));
                searchResult.add(prefix);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        }
        return searchResult;
    }

    public static ArrayList<PrefixB_Number> getSearchPrefix(String code, Connection conn) {
        ArrayList<PrefixB_Number> searchResult = new ArrayList<PrefixB_Number>();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT prefix, change,prefix_enrich_id FROM " + schemaCommon + "prefix_enrich where prefix like '%" + code + "%'";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                PrefixB_Number prefix = new PrefixB_Number(rs.getString(1), rs.getString(2), rs.getInt(3));
                searchResult.add(prefix);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        }
        return searchResult;
    }

    public static int createPrefix(PrefixB_Number prefix, Connection conn) {

        PreparedStatement stmt = null;
        try {
            String sql = "INSERT INTO " + schemaCommon + "PREFIX_ENRICH(prefix, change) ";
            sql += " VALUES('" + prefix.getPrefix();
            sql += " ','" + prefix.getChange() + "')";
            stmt = conn.prepareStatement(sql);
            stmt.execute(sql);
            conn.commit();
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
            e.printStackTrace();
            return ERROR;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
        }
        return SUCCESS;
    }

    public static Boolean checkExistCode(String code, Connection conn) {

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int result = 0;
        try {
            String query = "SELECT count(1) FROM " + schemaCommon + "PREFIX_ENRICH where prefix = '" + code + "'";
            pstmt = conn.prepareStatement(query);
            rs = pstmt.executeQuery(query);
            rs.next();
            result = rs.getInt(1);
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        }

        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }

    public static int updateZoneMap(PrefixB_Number prefix, Connection conn) {
        PreparedStatement stmt = null;
        try {
            String sql = "UPDATE " + schemaCommon + "PREFIX_ENRICH";
            sql += " SET prefix=" + prefix.getPrefix() + " change =" + prefix.getChange() + "";
            sql += " WHERE prefix_enrich_id = '" + prefix.getId() + "'";
            stmt = conn.prepareStatement(sql);
            stmt.execute(sql);
            conn.commit();
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
            return ERROR;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        }
        return SUCCESS;
    }

    public static int deleteZoneMap(Integer code, Connection conn) {

        PreparedStatement stmt = null;
        try {
            String sql = "DELETE FROM " + schemaCommon + "PREFIX_ENRICH ";
            sql += " WHERE prefix_enrich_id = '" + code + "'";
            stmt = conn.prepareStatement(sql);
            stmt.execute(sql);
            conn.commit();
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
            return ERROR;
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception ex) {
                ex.fillInStackTrace();
            }
        }

        return SUCCESS;
    }
}
